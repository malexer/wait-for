#!/bin/sh

TIMEOUT=15
QUIET=0

TABLES=""

echoerr() {
  printf "wait-for-pgtable: %s\n" "$*" 1>&2
}

echomsg() {
  if [ "$QUIET" -ne 1 ]; then echoerr "$*"; fi
}

usage() {
  exitcode="$1"
  cat << USAGE >&2

Usage:
  wait-for-pgtable TABLE [TABLE ...] [-t timeout] [-q] [-- command args]

  TABLE                               Name of the table to check for existence.
                                      Multiple table names are allowed - all
                                      of them will be checked.
  -q | --quiet                        Do not output status messages (only exit errors)
  -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout
  -- COMMAND ARGS                     Execute command with args after the test finishes

Connection to Postgres should be specified by environment variables:
PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD.
More info: https://www.postgresql.org/docs/current/static/libpq-envars.html
USAGE
  exit "$exitcode"
}

check_psql_exists() {
  command -v psql > /dev/null 2>&1

  result=$?
  if [ $result -ne 0 ] ; then
    echoerr '"psql" command was not found, you need to install it.'
    exit 3
  fi
}

is_pg_tables_available() {
  for TABLE in $TABLES; do
    ERROR_LOG=$(psql -wc "SELECT 1 FROM ${TABLE} LIMIT 0;" 2>&1)  # > /dev/null 2>&1

    result_table=$?
    if [ $result_table -ne 0 ] ; then
      echomsg "$ERROR_LOG"
      echomsg "Error querying the table '${TABLE}' in Postgres"
      false
      return
    fi
  done

  true
}

wait_for_pgtable() {
  for i in `seq $TIMEOUT` ; do
    echomsg "Checking Postgres, attempt #${i} ..."

    nc -z "$PGHOST" "$PGPORT" > /dev/null 2>&1

    result_nc=$?
    if [ $result_nc -eq 0 ] ; then
      if is_pg_tables_available ; then
        if [ $# -gt 0 ] ; then
          exec "$@"
        fi
        exit 0
      fi
    else
      echomsg "Can't connect to Postgres, retrying..."
    fi
    sleep 1
  done
  echoerr "Operation timed out"
  exit 1
}

while [ $# -gt 0 ]
do
  case "$1" in
    -q | --quiet)
    QUIET=1
    shift 1
    ;;
    -t)
    TIMEOUT="$2"
    if [ "$TIMEOUT" = "" ]; then break; fi
    shift 2
    ;;
    --timeout=*)
    TIMEOUT="${1#*=}"
    shift 1
    ;;
    --)
    shift
    break
    ;;
    --help)
    usage 0
    ;;
    *)
    TABLES="$TABLES $1"
    shift
    ;;
  esac
done

check_psql_exists

if [ -z "$TABLES" ]; then
  echoerr "ERROR - you need to provide at least one table name to test."
  usage 2
fi

if [ -z "$PGHOST" ] || [ -z "$PGPORT" ] || [ -z "$PGDATABASE" ] || [ -z "$PGUSER" ] || [ -z "$PGPASSWORD" ]; then
  echoerr "ERROR - you need to provide a PGHOST, PGPORT, PGDATABASE, PGUSER and PGPASSWORD as environment variables."
  usage 2
fi

wait_for_pgtable "$@"
